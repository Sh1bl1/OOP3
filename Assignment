// Q 1 
Answer 
b) To define a blueprint for a class

// Q 2
Answer 
a) private
b) protected
c) internal


// Q 3 
Answer 
b) No

// Q 4
Answer 
b) Yes, interfaces can inherit from multiple interfaces

// Q 5 
Answer 
d) implements

// Q 6
Answer 
a) Yes

// Q 7 
Answer 
b) No, all members are implicitly public

// Q 8 
Answer 
a) To hide the interface members from outside access

// Q 9 
Answer 
b) No, interfaces cannot have constructors

//  Q 10 
Answer 
c) By separating interface names with commas

---------------------------- Part 2 -----------------------------

// Q 1
public interface IShape
{
    double Area { get; set;}
    void DisplayShapeInfo();
}

public interface ICircle : IShape
{
    double Radius { get; set;}
}

public interface IRectangle : IShape
{
    double Width { get; set;}
    double Height { get; set;}
}

public class Circle : ICircle
{
    public double Radius { get; set; }
    public double Area = Math.PI * Radius * Radius;

    public Circle(double radius)
    {
        Radius = radius;
    }

    public void DisplayShapeInfo()
    {
        Console.WriteLine($"Shape: Circle");
        Console.WriteLine($"Radius: {Radius}");
        Console.WriteLine($"Area: {Area}");
    }
}

public class Rectangle : IRectangle
{
    public double Width { get; set; }
    public double Height { get; set; }
    public double Area = Width * Height;

    public Rectangle(double width, double height)
    {
        Width = width;
        Height = height;
    }

    public void DisplayShapeInfo()
    {
        Console.WriteLine($"Shape: Rectangle");
        Console.WriteLine($"Width: {Width}, Height: {Height}");
        Console.WriteLine($"Area: {Area}");
    }
}

class Program
{
    static void Main()
    {
        ICircle circle = new Circle(5);
        IRectangle rectangle = new Rectangle(4, 7);

        circle.DisplayShapeInfo();
        rectangle.DisplayShapeInfo();
    }
}

// Q 2 

public interface IAuthenticationService
{
    bool AuthenticateUser(string username, string password);
    bool AuthorizeUser(string username, string role);
}

public class User
{
    public string Username { get; set;}
    public string Password { get; set; }
    public string Role { get; set; }

    public User(string username, string password, string role)
    {
        Username = username;
        Password = password;
        Role = role;
    }
}

public class BasicAuthenticationService : IAuthenticationService
{
    private  User [] users = new User[2]
    {
        new User("admin", "12345", "Administrator"),
        new User("john", "password", "User")
    };

    public bool AuthenticateUser(string username, string password)
    {
        foreach (var user in users)
        {
            if (user.Username == username && user.Password == password)
            {
                Console.WriteLine($" {username} authenticated successfully.");
                return true;
            }
        }
        Console.WriteLine($" Authentication failed for {username}.");
        return false;
    }

    public bool AuthorizeUser(string username, string role)
    {
        foreach (var user in users)
        {
            if (user.Username == username && user.Role == role)
            {
                Console.WriteLine($"{username} authorized as {role}.");
                return true;
            }
        }
        Console.WriteLine($"{username} is not authorized as {role}.");
        return false;
    }
}

class Program
{
    static void Main()
    {
        IAuthenticationService authService = new BasicAuthenticationService();

            authService.AuthorizeUser("admin", "Administrator");
            authService.AuthorizeUser("admin", "User"); 

    }
}


